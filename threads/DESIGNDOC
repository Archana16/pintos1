			+--------------------+
			| CS-521             |
			| PROJECT 1: THREADS |
			| DESIGN DOCUMENT    |
			+--------------------+

Archana Suregaonkar <asuregao@buffalo.edu>


			     ALARM CLOCK
			     ===========

----------------- DATA STRUCTURES----------------------------------------------
A1: Copy here the declaration of each new or changed `struct' or
`struct' member, global or static variable, `typedef', or
enumeration.  Identify the purpose of each in 25 words or less.

In timer.c, added global list structure:
static struct list sleeping_threads;
This list keeps track of all threads that are sleeping for a given number of ticks.

In thread.h, added variable to thread struct:
int64_t ticks_to_sleep;

This variable is assigned a when timer_sleep() function is called to which keeps 
track of the number of ticks the thread is supposed to sleep 

------------------------------- ALGORITHMS -------------------------------------

A2: Briefly describe what happens in a call to timer_sleep(),
including the effects of the timer interrupt handler.

1. timer_sleep() recieves the number to ticks, which is added to the global ticks
and stored in thread's ticks_to_sleep variable
2. Inserts the current thread into the global list sleeping_threads
3. Removes the current thread from the ready list by blocking it. 

timer interrupt handler:
1. Checks if the number of global ticks are greater than the  ticks to sleep of
the first thread in the sleeping_thread list
2. If so it removes the first element from the list and continues to remove elements
until the global ticks is greater than the ticks_to_sleep value or the list is empty
3. Test if still the highest priority thread is still running.

------------------------------------------------------------------------------------
A3: What steps are taken to minimize the amount of time spent in
the timer interrupt handler?
Since the sleeping_thread list is kept sorted, it checks only the first element's 
ticks_to_sleep value rather than iterating through the entire list. If so, then it 
iterates the list only until the condition satisfies. Therefore the time spent is minimized

------------------------------------------------------------------------------------ 

A4: How are race conditions avoided when multiple threads call
timer_sleep() simultaneously?
timer_sleep() is not a critical function, it can be accesed by multiple threads, 
hence race conditions are not taken care.

--------------------------------------------------------------------------------------
A5: How are race conditions avoided when a timer interrupt occurs
during a call to timer_sleep()?
Since the ready list and sleeping thread list are read/modifiable, interrupts are disabled before
inserting into sleeping thread list and blocking the thread. Then the interrupts are enabled. 

-------------------------- RATIONALE --------------------------------------------------

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
In this design the sleeping_thread list is kept sorted so that in situation where a large 
number of threads sleep, the time spent in interrupt handler is minimised. Therefore this design
is better.

===============================================================================================

			 PRIORITY SCHEDULING
			 ===================

------------------ DATA STRUCTURES --------------------------------------------------

B1: Copy here the declaration of each new or changed `struct' or
`struct' member, global or static variable, `typedef', or
enumeration.  Identify the purpose of each in 25 words or less.

In thread.h, following variables are added to the thread structure
1. int lower_priority -> to keep track if priority of thread should be lower
2. struct list unrecovered_list -> list which keeps track of the threads which could not recover 
   their priorities because the lock holder was donated by a higher priority thread
3. struct lock *lock_to_hold -> the lock which the thread tries to acquire.
4. int is_donee-> to keep track if the thread has recieved any donation

In Synch.h added the following data structure:
1. struct list lock_list -> Added another member to the struct lock data structure
2. struct lock_list_node -> Added this structure which are maintained in the lock's lock_list

----------------------------------------------------------------------------------------------
B2: Explain the data structure used to track priority donation.
Use ASCII art to diagram a nested donation.  (Alternately, submit apng file.)

Usage of data structure at Lock Acquire :

1. Populates the lock_list_node.

2. If donation is required then the lock_list_node->donee is set to lock holder

3. When donation is not needed, the lock_list_node->donee is set to null

4. lock_list_node is pushed into the lock's list in a sorted manner.

Usage of data structure at Lock Release : 

1. Pops out the front element of the lock's list 

2. Either perform or not perform restoration of the thread's priortiy
which maipulates the donee threads unrecover_list and the lock's list

3. update the donee thread's priority parameters ie. is_donee, lower_priority
and lock_to_hold

------------------------------------- ALGORITHMS -----------------------------------

B3: How do you ensure that the highest priority thread waiting for
a lock, semaphore, or condition variable wakes up first?

In a semaphore, the list of waiters denotes the threads waiting for the
semaphore to be released. Thus, this list is kept sorted at the time of 
insertion and after deletion so that thread having the highest priority 
wakes up first.

---------------------------------------------------------------------------------------

B4: Describe the sequence of events when a call to lock_acquire()
causes a priority donation.  How is nested donation handled?

During lock acquire:
1.  Whenever a thread tries to acquire a lock it first check if the lock is 
held by another thread and if the lock holder's priority is smaller than the 
current thread.

2. If current thread has higher priority then performs donation by upgrading 
the lock holder's priority to the current thread's priority.

3. lock_list_node is pushed into the lock's list in a sorted manner.

Handling of nested donation : 

Nested donation is handled by running the lock acquire functionality in a loop until 
lock holder thread's lock_to_hold parameter is set. 
The initial lock is stored before entering the loop so that it can restored.

--------------------------------------------------------------------------------------

B5: Describe the sequence of events when lock_release() is called
on a lock that a higher-priority thread is waiting for.

During lock release :

1. Pops out the front element of the lock's list as it sorted and so it has the information 
of the highest pripority thread.

2. Checks if the priority can be restored and if not, then the popped out element is pushed
onto the donee thread's unrecovered list.

3. If the priority can be restored for the current thread then , restoration is performed
followed the restoration of the donee thread's unrecovered list.

----------------------------------- SYNCHRONIZATION ---------------------------------------

B6: Describe a potential race in thread_set_priority() and explain
how your implementation avoids it.  Can you use a lock to avoid
this race?

If a thread priority is being updated and mean while even ingterrupt 
handler modifies it, then there is possibility of the race condition.

In the thread_set_priority functions the interrupts are disabled because
the priority of a thread both read and modified. Therfore potential race 
conditions are avoided
Since the priority is also updated every 4 ticks from the interrupt handler also,
we cannot use locks. The interrupt handler cannot acquire locks.

---------------------------------------------- RATIONALE ---------------------------------------

B7: Why did you choose this design?  In what ways is it superior to
another design you considered?
I chose this design because it made easy use out of the linked list implementation already given.
Mainitaing link lists in sorted way and accesing made is very easy for keeping track
of the list of the locks and donee threads.

=================================================================================================

			  ADVANCED SCHEDULER
			  ==================

---------------------------- DATA STRUCTURES --------------------------------------------------

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
